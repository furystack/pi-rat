{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "GetDirectoryEntries": {
      "type": "object",
      "properties": {
        "url": {
          "type": "object",
          "properties": {
            "letter": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "letter",
            "path"
          ],
          "additionalProperties": false
        },
        "result": {
          "$ref": "#/definitions/GetCollectionResult%3CDirectoryEntry%3E"
        }
      },
      "required": [
        "url",
        "result"
      ],
      "additionalProperties": false
    },
    "GetCollectionResult<DirectoryEntry>": {
      "type": "object",
      "properties": {
        "count": {
          "type": "number",
          "description": "The Total count of entities"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DirectoryEntry"
          },
          "description": "List of the selected entities"
        }
      },
      "required": [
        "count",
        "entries"
      ],
      "additionalProperties": false,
      "description": "Response Model for GetCollection"
    },
    "DirectoryEntry": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "isFile": {
          "type": "boolean"
        },
        "isDirectory": {
          "type": "boolean"
        },
        "isBlockDevice": {
          "type": "boolean"
        },
        "isCharacterDevice": {
          "type": "boolean"
        },
        "isSymbolicLink": {
          "type": "boolean"
        },
        "isFIFO": {
          "type": "boolean"
        },
        "isSocket": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "isFile",
        "isDirectory",
        "isBlockDevice",
        "isCharacterDevice",
        "isSymbolicLink",
        "isFIFO",
        "isSocket"
      ],
      "additionalProperties": false
    },
    "UploadEndpoint": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "const": true
            },
            "entries": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DirectoryEntry"
              }
            }
          },
          "required": [
            "success",
            "entries"
          ],
          "additionalProperties": false
        },
        "url": {
          "type": "object",
          "properties": {
            "letter": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "letter",
            "path"
          ],
          "additionalProperties": false
        },
        "body": {}
      },
      "required": [
        "result",
        "url",
        "body"
      ],
      "additionalProperties": false
    },
    "DeleteFileEndpoint": {
      "type": "object",
      "properties": {
        "url": {
          "type": "object",
          "properties": {
            "letter": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "letter",
            "path"
          ],
          "additionalProperties": false
        },
        "result": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "const": true
            }
          },
          "required": [
            "success"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "url",
        "result"
      ],
      "additionalProperties": false
    },
    "DownloadEndpoint": {
      "type": "object",
      "properties": {
        "url": {
          "type": "object",
          "properties": {
            "letter": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "letter",
            "path"
          ],
          "additionalProperties": false
        },
        "result": {}
      },
      "required": [
        "url",
        "result"
      ],
      "additionalProperties": false
    },
    "PostDriveEndpoint": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/Omit%3CWithOptionalId%3CDrive%2C%22letter%22%3E%2C(%22createdAt%22%7C%22updatedAt%22)%3E"
        },
        "result": {
          "$ref": "#/definitions/Drive"
        }
      },
      "required": [
        "body",
        "result"
      ],
      "additionalProperties": false
    },
    "Omit<WithOptionalId<Drive,\"letter\">,(\"createdAt\"|\"updatedAt\")>": {
      "$ref": "#/definitions/Pick%3CWithOptionalId%3CDrive%2C%22letter%22%3E%2CExclude%3C(%22physicalPath%22%7C%22createdAt%22%7C%22updatedAt%22%7C%22letter%22)%2C(%22createdAt%22%7C%22updatedAt%22)%3E%3E"
    },
    "Pick<WithOptionalId<Drive,\"letter\">,Exclude<(\"physicalPath\"|\"createdAt\"|\"updatedAt\"|\"letter\"),(\"createdAt\"|\"updatedAt\")>>": {
      "type": "object",
      "properties": {
        "physicalPath": {
          "type": "string",
          "description": "The physical path that will be mounted to the drive letter"
        },
        "letter": {
          "type": "string",
          "description": "The drive letter, should be unique"
        }
      },
      "required": [
        "physicalPath"
      ],
      "additionalProperties": false
    },
    "Drive": {
      "type": "object",
      "properties": {
        "physicalPath": {
          "type": "string",
          "description": "The physical path that will be mounted to the drive letter"
        },
        "letter": {
          "type": "string",
          "description": "The drive letter, should be unique"
        },
        "createdAt": {
          "type": "string",
          "description": "The drive creation date",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Last update date",
          "format": "date-time"
        }
      },
      "required": [
        "physicalPath",
        "letter",
        "createdAt",
        "updatedAt"
      ],
      "additionalProperties": false
    },
    "PatchDriveEndpoint": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/Partial%3COmit%3CDrive%2C(%22createdAt%22%7C%22updatedAt%22)%3E%3E"
        },
        "url": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The drive letter, should be unique"
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        },
        "result": {
          "type": "object"
        }
      },
      "required": [
        "body",
        "url",
        "result"
      ],
      "additionalProperties": false
    },
    "Partial<Omit<Drive,(\"createdAt\"|\"updatedAt\")>>": {
      "type": "object",
      "properties": {
        "physicalPath": {
          "type": "string",
          "description": "The physical path that will be mounted to the drive letter"
        },
        "letter": {
          "type": "string",
          "description": "The drive letter, should be unique"
        }
      },
      "additionalProperties": false
    },
    "FfprobeEndpoint": {
      "type": "object",
      "properties": {
        "url": {
          "type": "object",
          "properties": {
            "letter": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "letter",
            "path"
          ],
          "additionalProperties": false
        },
        "result": {
          "$ref": "#/definitions/getInfo.FFProbeResult"
        }
      },
      "required": [
        "url",
        "result"
      ],
      "additionalProperties": false
    },
    "getInfo.FFProbeResult": {
      "type": "object",
      "properties": {
        "streams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/getInfo.FFProbeStream"
          }
        }
      },
      "required": [
        "streams"
      ],
      "additionalProperties": false
    },
    "getInfo.FFProbeStream": {
      "type": "object",
      "properties": {
        "index": {
          "type": "number"
        },
        "codec_name": {
          "type": "string"
        },
        "codec_long_name": {
          "type": "string"
        },
        "profile": {
          "type": "string"
        },
        "codec_type": {
          "type": "string",
          "enum": [
            "video",
            "audio",
            "images"
          ]
        },
        "codec_time_base": {
          "type": "string"
        },
        "codec_tag_string": {
          "type": "string"
        },
        "codec_tag": {
          "type": "string"
        },
        "extradata": {
          "type": "string"
        },
        "width": {
          "type": "number"
        },
        "height": {
          "type": "number"
        },
        "coded_width": {
          "type": "number"
        },
        "coded_height": {
          "type": "number"
        },
        "closed_captions": {
          "$ref": "#/definitions/getInfo.FFProbeBoolean"
        },
        "has_b_frames": {
          "type": "number"
        },
        "sample_aspect_ratio": {
          "type": "string"
        },
        "display_aspect_ratio": {
          "type": "string"
        },
        "pix_fmt": {
          "type": "string"
        },
        "level": {
          "type": "number"
        },
        "color_range": {
          "type": "string"
        },
        "color_space": {
          "type": "string"
        },
        "color_transfer": {
          "type": "string"
        },
        "color_primaries": {
          "type": "string"
        },
        "chroma_location": {
          "type": "string"
        },
        "field_order": {
          "type": "string"
        },
        "timecode": {
          "type": "string"
        },
        "refs": {
          "type": "number"
        },
        "sample_fmt": {
          "type": "string"
        },
        "sample_rate": {
          "type": "number"
        },
        "channels": {
          "type": "number"
        },
        "channel_layout": {
          "type": "string"
        },
        "bits_per_sample": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "r_frame_rate": {
          "type": "string"
        },
        "avg_frame_rate": {
          "type": "string"
        },
        "time_base": {
          "type": "string"
        },
        "start_pts": {
          "type": "number"
        },
        "start_time": {
          "type": "number"
        },
        "duration_ts": {
          "type": "number"
        },
        "duration": {
          "type": "string"
        },
        "bit_rate": {
          "type": "number"
        },
        "max_bit_rate": {
          "type": "number"
        },
        "bits_per_raw_sample": {
          "type": "number"
        },
        "nb_frames": {
          "type": "number"
        },
        "nb_read_frames": {
          "type": "number"
        },
        "nb_read_packets": {
          "type": "number"
        },
        "is_avc": {
          "type": "number"
        },
        "nal_length_size": {
          "type": "number"
        },
        "disposition": {
          "type": "object",
          "properties": {
            "default": {
              "type": "number"
            },
            "dub": {
              "type": "number"
            },
            "original": {
              "type": "number"
            },
            "comment": {
              "type": "number"
            },
            "lyrics": {
              "type": "number"
            },
            "karaoke": {
              "type": "number"
            },
            "forced": {
              "type": "number"
            },
            "hearing_impaired": {
              "type": "number"
            },
            "visual_impaired": {
              "type": "number"
            },
            "clean_effects": {
              "type": "number"
            },
            "attached_pic": {
              "type": "number"
            },
            "timed_thumbnails": {
              "type": "number"
            }
          },
          "required": [
            "default",
            "dub",
            "original",
            "comment",
            "lyrics",
            "karaoke",
            "forced",
            "hearing_impaired",
            "visual_impaired",
            "clean_effects",
            "attached_pic"
          ],
          "additionalProperties": false
        },
        "tags": {
          "type": "object",
          "properties": {
            "language": {
              "type": "string"
            },
            "handler_name": {
              "type": "string"
            },
            "creation_time": {
              "type": "string"
            }
          },
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "not": {}
              }
            ]
          }
        },
        "side_data_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/getInfo.SideData"
          }
        }
      },
      "required": [
        "index",
        "codec_time_base",
        "codec_tag_string",
        "codec_tag",
        "id",
        "r_frame_rate",
        "avg_frame_rate",
        "time_base",
        "disposition",
        "tags"
      ],
      "additionalProperties": false,
      "description": "Based on the XML definition of the ffprobe stream type {@see https://github.com/FFmpeg/FFmpeg/blob/master/doc/ffprobe.xsd#L206}"
    },
    "getInfo.FFProbeBoolean": {
      "type": "string",
      "enum": [
        "0",
        "1"
      ]
    },
    "getInfo.SideData": {
      "anyOf": [
        {
          "$ref": "#/definitions/getInfo.UnknownSideData"
        },
        {
          "$ref": "#/definitions/getInfo.DisplayMatrixSideData"
        },
        {
          "$ref": "#/definitions/getInfo.Stereo3dSideData"
        },
        {
          "$ref": "#/definitions/getInfo.SphericalMappingSideData"
        },
        {
          "$ref": "#/definitions/getInfo.SkipSamplesSideData"
        },
        {
          "$ref": "#/definitions/getInfo.MasteringDisplayMetadataSideData"
        },
        {
          "$ref": "#/definitions/getInfo.ContentLightLevelMetadataSideData"
        },
        {
          "$ref": "#/definitions/getInfo.DoviConfigurationRecordSideData"
        },
        {
          "$ref": "#/definitions/getInfo.AudioServiceTypeSideData"
        },
        {
          "$ref": "#/definitions/getInfo.MpegtsStreamIdSideData"
        },
        {
          "$ref": "#/definitions/getInfo.CpbPropertiesSideData"
        },
        {
          "$ref": "#/definitions/getInfo.WebvttSideData"
        },
        {
          "$ref": "#/definitions/getInfo.ActiveFormatDescriptionSideData"
        }
      ]
    },
    "getInfo.UnknownSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "unknown",
          "description": "Based on the C code related to the default side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2298}"
        }
      },
      "required": [
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.BaseSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string"
        }
      },
      "required": [
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.DisplayMatrixSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Display Matrix",
          "description": "Based on the C code related to Display Matrix side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2300-L2304}"
        },
        "displaymatrix": {
          "type": "string",
          "description": "Mismatches the type linked earlier because ffprobe JSON output reads the printed integers for the display matrix as a string"
        },
        "rotation": {
          "type": "number"
        }
      },
      "required": [
        "displaymatrix",
        "rotation",
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.Stereo3dSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Stereo 3D",
          "description": "Based on the C code related to Stereo 3D side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2306-L2308}"
        },
        "type": {
          "type": "string",
          "enum": [
            "unknown",
            "2D",
            "side by side",
            "top and bottom",
            "frame alternate",
            "checkerboard",
            "side by side (quincunx subsampling)",
            "interleaved lines",
            "interleaved columns"
          ],
          "description": "Based on the C code of the libauvutil stereo3d file {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/libavutil/stereo3d.c#L47-L56}"
        },
        "inverted": {
          "type": "number"
        }
      },
      "required": [
        "inverted",
        "side_data_type",
        "type"
      ],
      "additionalProperties": false
    },
    "getInfo.SphericalMappingSideData": {
      "anyOf": [
        {
          "$ref": "#/definitions/getInfo.UnknownSphericalMappingSideData"
        },
        {
          "$ref": "#/definitions/getInfo.EquirectangularSphericalMappingSideData"
        },
        {
          "$ref": "#/definitions/getInfo.CubeMapSphericalMappingSideData"
        },
        {
          "$ref": "#/definitions/getInfo.TiltedEquirectangularSphericalMappingSideData"
        }
      ]
    },
    "getInfo.UnknownSphericalMappingSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Spherical Mapping",
          "description": "Based on the C code related to Spherical Mapping side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2310-L2326}"
        },
        "projection": {
          "type": "string",
          "const": "unknown",
          "description": "Based on the C code of the libauvutil spherical file {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/libavutil/spherical.c#L55-L59}"
        },
        "yaw": {
          "type": "number"
        },
        "pitch": {
          "type": "number"
        },
        "roll": {
          "type": "number"
        }
      },
      "required": [
        "pitch",
        "projection",
        "roll",
        "side_data_type",
        "yaw"
      ],
      "additionalProperties": false
    },
    "getInfo.BaseSphericalMappingSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Spherical Mapping",
          "description": "Based on the C code related to Spherical Mapping side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2310-L2326}"
        },
        "projection": {
          "type": "string",
          "description": "Based on the C code of the libauvutil spherical file {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/libavutil/spherical.c#L55-L59}"
        },
        "yaw": {
          "type": "number"
        },
        "pitch": {
          "type": "number"
        },
        "roll": {
          "type": "number"
        }
      },
      "required": [
        "pitch",
        "projection",
        "roll",
        "side_data_type",
        "yaw"
      ],
      "additionalProperties": false
    },
    "getInfo.EquirectangularSphericalMappingSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Spherical Mapping",
          "description": "Based on the C code related to Spherical Mapping side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2310-L2326}"
        },
        "projection": {
          "type": "string",
          "const": "equirectangular",
          "description": "Based on the C code of the libauvutil spherical file {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/libavutil/spherical.c#L55-L59}"
        },
        "yaw": {
          "type": "number"
        },
        "pitch": {
          "type": "number"
        },
        "roll": {
          "type": "number"
        }
      },
      "required": [
        "pitch",
        "projection",
        "roll",
        "side_data_type",
        "yaw"
      ],
      "additionalProperties": false
    },
    "getInfo.CubeMapSphericalMappingSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Spherical Mapping",
          "description": "Based on the C code related to Spherical Mapping side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2310-L2326}"
        },
        "projection": {
          "type": "string",
          "const": "cubemap",
          "description": "Based on the C code of the libauvutil spherical file {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/libavutil/spherical.c#L55-L59}"
        },
        "yaw": {
          "type": "number"
        },
        "pitch": {
          "type": "number"
        },
        "roll": {
          "type": "number"
        },
        "padding": {
          "type": "number",
          "description": "Based on the C code related to Cube Map Spherical Mapping side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2313}"
        }
      },
      "required": [
        "padding",
        "pitch",
        "projection",
        "roll",
        "side_data_type",
        "yaw"
      ],
      "additionalProperties": false
    },
    "getInfo.TiltedEquirectangularSphericalMappingSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Spherical Mapping",
          "description": "Based on the C code related to Spherical Mapping side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2310-L2326}"
        },
        "projection": {
          "type": "string",
          "const": "tiled equirectangular",
          "description": "Based on the C code of the libauvutil spherical file {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/libavutil/spherical.c#L55-L59}"
        },
        "yaw": {
          "type": "number"
        },
        "pitch": {
          "type": "number"
        },
        "roll": {
          "type": "number"
        },
        "bound_left": {
          "type": "number",
          "description": "Based on the C code related to Cube Map Spherical Mapping side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2315-L2321}"
        },
        "bound_top": {
          "type": "number"
        },
        "bound_right": {
          "type": "number"
        },
        "bound_bottom": {
          "type": "number"
        }
      },
      "required": [
        "bound_bottom",
        "bound_left",
        "bound_right",
        "bound_top",
        "pitch",
        "projection",
        "roll",
        "side_data_type",
        "yaw"
      ],
      "additionalProperties": false
    },
    "getInfo.SkipSamplesSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Skip Samples",
          "description": "Based on the C code related to Skip Samples side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2328-L2331}"
        },
        "skip_samples": {
          "type": "number"
        },
        "discard_padding": {
          "type": "number"
        },
        "skip_reason": {
          "type": "number"
        },
        "discard_reason": {
          "type": "number"
        }
      },
      "required": [
        "discard_padding",
        "discard_reason",
        "side_data_type",
        "skip_reason",
        "skip_samples"
      ],
      "additionalProperties": false
    },
    "getInfo.MasteringDisplayMetadataSideData": {
      "anyOf": [
        {
          "$ref": "#/definitions/getInfo.PrimariesMasteringDisplayMetadataSideData"
        },
        {
          "$ref": "#/definitions/getInfo.LuminanceMasteringDisplayMetadataSideData"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "side_data_type": {
              "type": "string",
              "const": "Mastering display metadata",
              "description": "Based on the C code related to Mastering display metadata side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2333-L2350}"
            },
            "min_luminance": {
              "type": "string",
              "description": "Based on the C code related to Luminance Mastering display metadata side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2348-L2349}"
            },
            "max_luminance": {
              "type": "string"
            },
            "red_x": {
              "type": "string",
              "description": "Based on the C code related to Primaries Mastering display metadata side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2336-L2344}"
            },
            "red_y": {
              "type": "string"
            },
            "green_x": {
              "type": "string"
            },
            "green_y": {
              "type": "string"
            },
            "blue_x": {
              "type": "string"
            },
            "blue_y": {
              "type": "string"
            },
            "white_point_x": {
              "type": "string"
            },
            "white_point_y": {
              "type": "string"
            }
          },
          "required": [
            "blue_x",
            "blue_y",
            "green_x",
            "green_y",
            "max_luminance",
            "min_luminance",
            "red_x",
            "red_y",
            "side_data_type",
            "white_point_x",
            "white_point_y"
          ]
        }
      ]
    },
    "getInfo.PrimariesMasteringDisplayMetadataSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Mastering display metadata",
          "description": "Based on the C code related to Mastering display metadata side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2333-L2350}"
        },
        "red_x": {
          "type": "string",
          "description": "Based on the C code related to Primaries Mastering display metadata side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2336-L2344}"
        },
        "red_y": {
          "type": "string"
        },
        "green_x": {
          "type": "string"
        },
        "green_y": {
          "type": "string"
        },
        "blue_x": {
          "type": "string"
        },
        "blue_y": {
          "type": "string"
        },
        "white_point_x": {
          "type": "string"
        },
        "white_point_y": {
          "type": "string"
        }
      },
      "required": [
        "blue_x",
        "blue_y",
        "green_x",
        "green_y",
        "red_x",
        "red_y",
        "side_data_type",
        "white_point_x",
        "white_point_y"
      ],
      "additionalProperties": false
    },
    "getInfo.BaseMasteringDisplayMetadataSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Mastering display metadata",
          "description": "Based on the C code related to Mastering display metadata side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2333-L2350}"
        }
      },
      "required": [
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.LuminanceMasteringDisplayMetadataSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Mastering display metadata",
          "description": "Based on the C code related to Mastering display metadata side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2333-L2350}"
        },
        "min_luminance": {
          "type": "string",
          "description": "Based on the C code related to Luminance Mastering display metadata side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2348-L2349}"
        },
        "max_luminance": {
          "type": "string"
        }
      },
      "required": [
        "max_luminance",
        "min_luminance",
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.ContentLightLevelMetadataSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Content light level metadata",
          "description": "Based on the C code related to Content light level metadata side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2352-L2354}"
        },
        "max_content": {
          "type": "number"
        },
        "max_average": {
          "type": "number"
        }
      },
      "required": [
        "max_average",
        "max_content",
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.DoviConfigurationRecordSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "DOVI configuration record",
          "description": "Based on the C code related to DOVI configuration record side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2356-L2364}"
        },
        "dv_version_major": {
          "type": "number"
        },
        "dv_version_minor": {
          "type": "number"
        },
        "dv_profile": {
          "type": "number"
        },
        "dv_level": {
          "type": "number"
        },
        "rpu_present_flag": {
          "type": "number"
        },
        "el_present_flag": {
          "type": "number"
        },
        "bl_present_flag": {
          "type": "number"
        },
        "dv_bl_signal_compatibility_id": {
          "type": "number"
        }
      },
      "required": [
        "bl_present_flag",
        "dv_bl_signal_compatibility_id",
        "dv_level",
        "dv_profile",
        "dv_version_major",
        "dv_version_minor",
        "el_present_flag",
        "rpu_present_flag",
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.AudioServiceTypeSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Audio Service Type",
          "description": "Based on the C code related to Audio Service Type side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2366-L2367}"
        },
        "service_type": {
          "type": "number"
        }
      },
      "required": [
        "service_type",
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.MpegtsStreamIdSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "MPEGTS Stream ID",
          "description": "Based on the C code related to MPEGTS Stream ID side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2369}"
        },
        "id": {
          "type": "number"
        }
      },
      "required": [
        "id",
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.CpbPropertiesSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "CPB properties",
          "description": "Based on the C code related to CPB properties side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2371-L2376}"
        },
        "max_bitrate": {
          "type": "number"
        },
        "min_bitrate": {
          "type": "number"
        },
        "avg_bitrate": {
          "type": "number"
        },
        "buffer_size": {
          "type": "number"
        },
        "vbv_delay": {
          "type": "number"
        }
      },
      "required": [
        "avg_bitrate",
        "buffer_size",
        "max_bitrate",
        "min_bitrate",
        "side_data_type",
        "vbv_delay"
      ],
      "additionalProperties": false
    },
    "getInfo.WebvttSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "enum": [
            "WebVTT ID",
            "WebVTT Settings"
          ],
          "description": "Based on the C code related to Webvtt side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2379-L2381}"
        },
        "data": {
          "type": "string"
        },
        "data_hash": {
          "type": "string"
        }
      },
      "required": [
        "data_hash",
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "getInfo.ActiveFormatDescriptionSideData": {
      "type": "object",
      "properties": {
        "side_data_type": {
          "type": "string",
          "const": "Active format description",
          "description": "Based on the C code related to Active format description side data section {@see https://github.com/FFmpeg/FFmpeg/blob/b37795688a9bfa6d5a2e9b2535c4b10ebc14ac5d/fftools/ffprobe.c#L2383}"
        },
        "active_format": {
          "type": "number"
        }
      },
      "required": [
        "side_data_type"
      ],
      "additionalProperties": false
    },
    "SaveTextFileEndpoint": {
      "type": "object",
      "properties": {
        "url": {
          "type": "object",
          "properties": {
            "letter": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "letter",
            "path"
          ],
          "additionalProperties": false
        },
        "body": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string"
            }
          },
          "required": [
            "text"
          ],
          "additionalProperties": false
        },
        "result": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "const": true
            }
          },
          "required": [
            "success"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "url",
        "body",
        "result"
      ],
      "additionalProperties": false
    },
    "DrivesApi": {
      "type": "object",
      "properties": {
        "GET": {
          "type": "object",
          "properties": {
            "/volumes": {
              "$ref": "#/definitions/GetCollectionEndpoint%3CDrive%3E"
            },
            "/volumes/:id": {
              "$ref": "#/definitions/GetEntityEndpoint%3CDrive%2C%22letter%22%3E"
            },
            "/files/:letter/:path": {
              "$ref": "#/definitions/GetDirectoryEntries"
            },
            "/files/:letter/:path/download": {
              "$ref": "#/definitions/DownloadEndpoint"
            },
            "/files/:letter/:path/ffprobe": {
              "$ref": "#/definitions/FfprobeEndpoint"
            }
          },
          "required": [
            "/volumes",
            "/volumes/:id",
            "/files/:letter/:path",
            "/files/:letter/:path/download",
            "/files/:letter/:path/ffprobe"
          ],
          "additionalProperties": false
        },
        "POST": {
          "type": "object",
          "properties": {
            "/volumes": {
              "$ref": "#/definitions/PostDriveEndpoint"
            },
            "/volumes/:letter/:path/upload": {
              "$ref": "#/definitions/UploadEndpoint"
            }
          },
          "required": [
            "/volumes",
            "/volumes/:letter/:path/upload"
          ],
          "additionalProperties": false
        },
        "PATCH": {
          "type": "object",
          "properties": {
            "/volumes/:id": {
              "$ref": "#/definitions/PatchEndpoint%3CDrive%2C%22letter%22%3E"
            }
          },
          "required": [
            "/volumes/:id"
          ],
          "additionalProperties": false
        },
        "PUT": {
          "type": "object",
          "properties": {
            "/files/:letter/:path": {
              "$ref": "#/definitions/SaveTextFileEndpoint"
            }
          },
          "required": [
            "/files/:letter/:path"
          ],
          "additionalProperties": false
        },
        "DELETE": {
          "type": "object",
          "properties": {
            "/volumes/:id": {
              "$ref": "#/definitions/DeleteEndpoint%3CDrive%2C%22letter%22%3E"
            },
            "/files/:letter/:path": {
              "$ref": "#/definitions/DeleteFileEndpoint"
            }
          },
          "required": [
            "/volumes/:id",
            "/files/:letter/:path"
          ],
          "additionalProperties": false
        },
        "HEAD": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "CONNECT": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "TRACE": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "OPTIONS": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        }
      },
      "required": [
        "GET",
        "POST",
        "PUT",
        "PATCH",
        "DELETE"
      ],
      "additionalProperties": false
    },
    "RestApi": {
      "type": "object",
      "properties": {
        "GET": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "POST": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "PATCH": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "PUT": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "DELETE": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "HEAD": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "CONNECT": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "TRACE": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        },
        "OPTIONS": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "result": {},
              "url": {},
              "query": {},
              "body": {},
              "headers": {}
            },
            "required": [
              "result"
            ],
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "GetCollectionEndpoint<Drive>": {
      "type": "object",
      "properties": {
        "query": {
          "type": "object",
          "properties": {
            "findOptions": {
              "$ref": "#/definitions/FindOptions%3CDrive%2C(%22physicalPath%22%7C%22letter%22%7C%22createdAt%22%7C%22updatedAt%22)%5B%5D%3E"
            }
          },
          "additionalProperties": false
        },
        "result": {
          "$ref": "#/definitions/GetCollectionResult%3CDrive%3E"
        }
      },
      "required": [
        "query",
        "result"
      ],
      "additionalProperties": false,
      "description": "Rest endpoint model for getting / querying collections"
    },
    "FindOptions<Drive,(\"physicalPath\"|\"letter\"|\"createdAt\"|\"updatedAt\")[]>": {
      "type": "object",
      "properties": {
        "top": {
          "type": "number",
          "description": "Limits the hits"
        },
        "skip": {
          "type": "number",
          "description": "Skips the first N hit"
        },
        "order": {
          "type": "object",
          "properties": {
            "physicalPath": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            },
            "letter": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            },
            "createdAt": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            },
            "updatedAt": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "additionalProperties": false,
          "description": "Sets up an order by a field and a direction"
        },
        "select": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "physicalPath",
              "letter",
              "createdAt",
              "updatedAt"
            ]
          },
          "description": "The result set will be limited to these fields"
        },
        "filter": {
          "$ref": "#/definitions/FilterType%3CDrive%3E",
          "description": "The fields should match this filter"
        }
      },
      "additionalProperties": false,
      "description": "Type for default filtering model"
    },
    "FilterType<Drive>": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "$and": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterType%3CDrive%3E"
          }
        },
        "$not": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterType%3CDrive%3E"
          }
        },
        "$nor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterType%3CDrive%3E"
          }
        },
        "$or": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterType%3CDrive%3E"
          }
        },
        "physicalPath": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "$startsWith": {
                  "type": "string",
                  "description": "The physical path that will be mounted to the drive letter"
                },
                "$endsWith": {
                  "type": "string",
                  "description": "The physical path that will be mounted to the drive letter"
                },
                "$like": {
                  "type": "string",
                  "description": "The physical path that will be mounted to the drive letter"
                },
                "$regex": {
                  "type": "string",
                  "description": "The physical path that will be mounted to the drive letter"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$eq": {
                  "type": "string",
                  "description": "The physical path that will be mounted to the drive letter"
                },
                "$ne": {
                  "type": "string",
                  "description": "The physical path that will be mounted to the drive letter"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$in": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "The physical path that will be mounted to the drive letter"
                  }
                },
                "$nin": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "The physical path that will be mounted to the drive letter"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "letter": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "$startsWith": {
                  "type": "string",
                  "description": "The drive letter, should be unique"
                },
                "$endsWith": {
                  "type": "string",
                  "description": "The drive letter, should be unique"
                },
                "$like": {
                  "type": "string",
                  "description": "The drive letter, should be unique"
                },
                "$regex": {
                  "type": "string",
                  "description": "The drive letter, should be unique"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$eq": {
                  "type": "string",
                  "description": "The drive letter, should be unique"
                },
                "$ne": {
                  "type": "string",
                  "description": "The drive letter, should be unique"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$in": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "The drive letter, should be unique"
                  }
                },
                "$nin": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "The drive letter, should be unique"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "createdAt": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "$startsWith": {
                  "type": "string",
                  "description": "The drive creation date",
                  "format": "date-time"
                },
                "$endsWith": {
                  "type": "string",
                  "description": "The drive creation date",
                  "format": "date-time"
                },
                "$like": {
                  "type": "string",
                  "description": "The drive creation date",
                  "format": "date-time"
                },
                "$regex": {
                  "type": "string",
                  "description": "The drive creation date",
                  "format": "date-time"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$eq": {
                  "type": "string",
                  "description": "The drive creation date",
                  "format": "date-time"
                },
                "$ne": {
                  "type": "string",
                  "description": "The drive creation date",
                  "format": "date-time"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$in": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "The drive creation date",
                    "format": "date-time"
                  }
                },
                "$nin": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "The drive creation date",
                    "format": "date-time"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "updatedAt": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "$startsWith": {
                  "type": "string",
                  "description": "Last update date",
                  "format": "date-time"
                },
                "$endsWith": {
                  "type": "string",
                  "description": "Last update date",
                  "format": "date-time"
                },
                "$like": {
                  "type": "string",
                  "description": "Last update date",
                  "format": "date-time"
                },
                "$regex": {
                  "type": "string",
                  "description": "Last update date",
                  "format": "date-time"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$eq": {
                  "type": "string",
                  "description": "Last update date",
                  "format": "date-time"
                },
                "$ne": {
                  "type": "string",
                  "description": "Last update date",
                  "format": "date-time"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$in": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Last update date",
                    "format": "date-time"
                  }
                },
                "$nin": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "Last update date",
                    "format": "date-time"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "GetCollectionResult<Drive>": {
      "type": "object",
      "properties": {
        "count": {
          "type": "number",
          "description": "The Total count of entities"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Drive"
          },
          "description": "List of the selected entities"
        }
      },
      "required": [
        "count",
        "entries"
      ],
      "additionalProperties": false,
      "description": "Response Model for GetCollection"
    },
    "GetEntityEndpoint<Drive,\"letter\">": {
      "type": "object",
      "properties": {
        "query": {
          "type": "object",
          "properties": {
            "select": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "physicalPath",
                  "letter",
                  "createdAt",
                  "updatedAt"
                ]
              },
              "description": "The list of fields to select"
            }
          },
          "additionalProperties": false
        },
        "url": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The entity's unique identifier"
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        },
        "result": {
          "$ref": "#/definitions/Drive"
        }
      },
      "required": [
        "query",
        "url",
        "result"
      ],
      "additionalProperties": false,
      "description": "Endpoint model for getting a single entity"
    },
    "PatchEndpoint<Drive,\"letter\">": {
      "type": "object",
      "properties": {
        "body": {
          "$ref": "#/definitions/Partial%3CDrive%3E"
        },
        "url": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The drive letter, should be unique"
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        },
        "result": {
          "type": "object"
        }
      },
      "required": [
        "body",
        "url",
        "result"
      ],
      "additionalProperties": false,
      "description": "Endpoint model for updating entities"
    },
    "Partial<Drive>": {
      "type": "object",
      "properties": {
        "physicalPath": {
          "type": "string",
          "description": "The physical path that will be mounted to the drive letter"
        },
        "letter": {
          "type": "string",
          "description": "The drive letter, should be unique"
        },
        "createdAt": {
          "type": "string",
          "description": "The drive creation date",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Last update date",
          "format": "date-time"
        }
      },
      "additionalProperties": false
    },
    "DeleteEndpoint<Drive,\"letter\">": {
      "type": "object",
      "properties": {
        "url": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The drive letter, should be unique"
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        },
        "result": {
          "type": "object"
        }
      },
      "required": [
        "url",
        "result"
      ],
      "additionalProperties": false,
      "description": "Endpoint model for deleting entities"
    }
  }
}